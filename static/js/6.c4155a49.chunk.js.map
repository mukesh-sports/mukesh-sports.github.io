{"version":3,"sources":["Modals/LanguagePopup.jsx","Component/CustomComponent/SelectLanguage.jsx"],"names":["LanguagePopup","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","selectedLang","setState","language","value","isChanges","state","DefaultLanguage","i18n","window","ReactNativeWebView","data","action","locale","targetFunc","postMessage","JSON","stringify","changeLanguage","WSManager","setAppLang","changeLanguageString","location","reload","IsLanguagePopupHide","_this2","_this$props","IsLanguagePopupShow","LanguageList","react_default","a","createElement","MyProvider","Consumer","Modal","show","onHide","bsSize","dialogClassName","className","Header","closeButton","Body","src","Images","LANGUAGE_IMG","alt","AppLabels","Row","Col","sm","map","item","idx","key","xs","onClick","label","desc","disabled","type","submitLanguage","React","Component","SelectLanguage","LanguagePopupShow","showLanguagePopup","LanguagePopupHide","languageList","ALLOW_LANG","defaultLang","getAppLang","Utilities","getMasterData","default_lang","_this$state","isBottomFixed","boxView","length","slice","Fragment","href","LanguagePopup_LanguagePopup","assign","withTranslation"],"mappings":"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","file":"static/js/6.c4155a49.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, Row, Col } from 'react-bootstrap';\nimport Images from '../components/images';\nimport * as AppLabels from \"../helper/AppLabels\";\nimport { MyContext } from '../InitialSetup/MyProvider';\nimport WSManager from \"../WSHelper/WSManager\";\nimport { changeLanguageString } from \"../helper/AppLabels\";\n\nexport default class LanguagePopup extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            language: this.props.DefaultLanguage,\n            isChanges: false\n        };\n    }\n\n    handleChange = (selectedLang) => {\n        this.setState({\n            language: selectedLang.value,\n            isChanges: true\n        })\n    };\n\n    submitLanguage() {\n        let selectedLang = this.state.language;\n        if (this.props.i18n.language != selectedLang) {\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'back',\n                    locale:selectedLang,\n                    targetFunc:'handleLanguageChange'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            }\n            this.props.i18n.changeLanguage(selectedLang);\n            WSManager.setAppLang(selectedLang);\n            changeLanguageString();\n            window.location.reload();\n        } else {\n            this.props.IsLanguagePopupHide();\n        }\n    }\n\n    render() {\n\n        const { IsLanguagePopupShow, IsLanguagePopupHide, LanguageList } = this.props;\n        return (\n            <MyContext.Consumer>\n                {(context) => (\n                    <div>\n                        <Modal show={IsLanguagePopupShow} onHide={IsLanguagePopupHide} bsSize=\"large\" dialogClassName=\"language-modal\" className=\"center-modal\">\n                            <Modal.Header closeButton>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"text-center center-section\">\n                                    <div className=\"language-header\">\n                                        <img src={Images.LANGUAGE_IMG} alt=\"\" />\n                                        <div className=\"m-t-20\">{AppLabels.SELECT_YOUR_LANGUAGE}</div>\n                                    </div>\n                                    <div className=\"language-modal-body\">\n                                        <Row>\n                                            <Col sm={2}></Col>\n                                            <Col sm={8}>\n                                                <Row>\n                                                    {LanguageList && LanguageList.map((item, idx) => {\n                                                        return (\n                                                            <Col key={idx} xs={6} className=\"text-center\">\n                                                                <div\n                                                                    onClick={() => this.handleChange(item)}\n                                                                    className={\"language-box\" + (item.value == this.state.language ? ' selected' : '')}>\n                                                                    <div className=\"language-text\">{item.label}</div>\n                                                                    <div className=\"language-sub-text\">{item.desc}</div>\n                                                                </div>\n                                                            </Col>\n                                                        )\n                                                    })\n                                                    }\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <Row>\n                                        <Col xs={12} className=\"text-center\">\n                                            <button disabled={!this.state.isChanges} className=\"submit-otp\" type='submit' onClick={() => this.submitLanguage()}><i className=\"icon-check icon-next-btn\"></i></button>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Modal.Body>\n                        </Modal>\n                    </div>\n                )}\n            </MyContext.Consumer>\n        );\n    }\n}","import React from 'react';\nimport { changeLanguageString } from \"../../helper/AppLabels\";\nimport { withTranslation } from \"react-i18next\";\nimport { Utilities } from '../../Utilities/Utilities';\nimport LanguagePopup from \"../../Modals/LanguagePopup\";\nimport WSManager from \"../../WSHelper/WSManager\";\nimport { ALLOW_LANG } from '../../helper/Constants';\n\nclass SelectLanguage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showLanguagePopup: false,\n            languageList: ALLOW_LANG,\n            defaultLang: WSManager.getAppLang() || Utilities.getMasterData().default_lang\n        }\n    }\n\n    componentDidMount() {\n        if (WSManager.getAppLang() == null) {\n            WSManager.setAppLang(this.state.defaultLang);\n        }\n        changeLanguageString();\n    }\n\n    handleChange = (selectedLang) => {\n        if (this.props.i18n.language != selectedLang.value) {\n            if (window.ReactNativeWebView) {\n                let data = {\n                    action: 'back',\n                    locale:selectedLang.value,\n                    targetFunc:'handleLanguageChange'\n                }\n                window.ReactNativeWebView.postMessage(JSON.stringify(data));\n            }\n            this.props.i18n.changeLanguage(selectedLang.value);\n            WSManager.setAppLang(selectedLang.value);\n            changeLanguageString();\n            window.location.reload();\n        }\n    };\n\n    LanguagePopupShow = () => {\n        this.setState({\n            showLanguagePopup: true\n        });\n    }\n    /**\n     * \n     * @description method to hide collection info model.\n     */\n    LanguagePopupHide = () => {\n        this.setState({\n            showLanguagePopup: false,\n        });\n    }\n    render() {\n        const {\n            showLanguagePopup,\n            languageList,\n            defaultLang\n        } = this.state;\n\n        const { isBottomFixed, boxView } = this.props;\n\n        return (\n            <div>\n                {languageList.length >= 2 &&\n                    <div className={\"language-wrapper\" + (isBottomFixed ? ' language-btm-fixed' : '') + (boxView ? ' language-box-view' : '') + (languageList.length == 2 ? ' two-lang-wrap' : '')}>\n                        <ul>\n                            {\n                                languageList && languageList.slice(0, 3).map((item, idx) => {\n                                    return (\n                                        <React.Fragment key={idx}>\n                                            {idx < 2 &&\n                                                <li className={item.value == defaultLang ? 'active' : ''}>\n                                                    <a href\n                                                        onClick={() => this.handleChange(item)}\n                                                    >{item.label}</a>\n                                                </li>\n                                            }\n                                            {\n                                                idx === 2 &&\n                                                <li>\n                                                    <a href onClick={() => this.LanguagePopupShow()}>\n                                                        <i className=\"icon-more-large rotate-90deg\"></i>\n                                                    </a>\n                                                </li>\n                                            }\n                                        </React.Fragment>\n                                    )\n                                })\n                            }\n                        </ul>\n                    </div>\n                }\n                {showLanguagePopup &&\n                    <LanguagePopup {...this.props} IsLanguagePopupShow={showLanguagePopup} IsLanguagePopupHide={this.LanguagePopupHide} LanguageList={languageList} DefaultLanguage={defaultLang} />\n                }\n            </div>\n        );\n    }\n}\n\nexport default withTranslation()(SelectLanguage)"],"sourceRoot":""}